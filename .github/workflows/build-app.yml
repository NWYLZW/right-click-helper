# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    tags:
    - '*.*.*.*'

jobs:
  build-release:
    name: Build Release
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      id: install-dependencies
      run: |
        pip install poetry
        poetry install

    - name: Build Release
      needs: [ install-dependencies ]

      id: biuld-release
      run: |
        poetry run build
        poetry run generateChangeLog

    - name: Upload release
      needs: [ biuld-release ]

      id: upload-release
      uses: actions/upload-artifact@v2
      with:
        name: releases
        path: releases

    - name: Upload changelog
      needs: [ biuld-release ]

      id: upload-changelog
      uses: actions/upload-artifact@v2
      with:
        name: latestChangeLog.md
        path: latestChangeLog.md

  publish-release:
    needs: [build-release]
    name: Publish Release
    runs-on: windows-latest

    steps:
    - name: Download changelog
      id: download-changelog
      uses: actions/download-artifact@v2
      with:
        name: latestChangeLog.md

    - name: Save changelog to env
      needs: [ download-changelog ]

      id: save-changelog
      run: |
        latestChangeLog="$(cat ./latestChangeLog.md)"
        echo '::set-output name=latestChangeLog::${latestChangeLog}'

    - name: Create Release
      needs: [ save-changelog ]
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{steps.save-changelog.outputs.save-changelog}}
        draft: false
        prerelease: false

    - name: Download release
      needs: [ create-release ]

      id: download-release
      uses: actions/download-artifact@v2
      with:
        name: releases

    - name: Upload Release Asset
      needs: [ download-release ]

      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./right-click-helper-latest.zip
        asset_name: right-click-helper-${{ github.ref }}.zip
        asset_content_type: application/zip
